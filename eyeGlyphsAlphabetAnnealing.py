import random
import math
from statistics import mean, stdev, variance, pvariance
from sympy.ntheory import discrete_log
from sympy.ntheory.residue_ntheory import nthroot_mod, is_primitive_root

RANDOM_MESSAGE = False
PRESERVE_REPEATED = False

USE_50_PLUS = False

REPEATS_BEFORE_SKIP = 1000


##messages = ((50, 66, 5, 48, 62, 13, 75, 29, 24, 61, 42, 70, 66, 62, 32, 14, 81, 8,  15, 78, 2,  29, 13, 49, 1,  80, 82, 40, 63, 81, 21, 19, 0, 40, 51, 65, 26, 14, 21, 70, 47, 44, 48, 42, 19, 48, 13, 47, 19, 49, 72, 31, 5, 24, 3, 43, 59, 67, 33, 49, 41, 60, 21, 26, 30, 5, 25, 20, 71, 11, 74, 56, 4, 74, 19, 71, 4, 51, 41, 43, 80, 72, 54, 63, 79, 81, 15, 16, 44, 31, 30, 12, 33, 57, 28, 13, 64, 43, 48),
##            (80, 66, 5, 48, 62, 13, 75, 29, 24, 61, 42, 70, 66, 62, 32, 14, 81, 8,  15, 78, 2,  29, 13, 49, 1,  29, 11, 30, 52, 81, 21, 19, 0, 25, 26, 54, 20, 14, 21, 70, 47, 44, 48, 42, 19, 48, 13, 47, 19, 49, 44, 26, 59, 77, 64, 43, 79, 28, 72, 64, 1, 30, 73, 23, 67, 6, 33, 25, 64, 81, 68, 46, 17, 36, 13, 17, 21, 68, 13, 9, 46, 67, 57, 34, 62, 82, 15, 10, 73, 62, 2, 11, 65, 72, 37, 44, 10, 43, 68, 62, 9, 34, 18),
##            (36, 66, 5, 48, 62, 13, 75, 29, 24, 61, 42, 70, 66, 62, 32, 14, 81, 8,  15, 78, 2,  29, 13, 49, 1,  69, 76, 52, 9,  48, 66, 80, 22, 64, 57, 40, 49, 78, 3, 16, 56, 19, 47, 40, 80, 6, 13, 64, 29, 49, 64, 63, 6, 49, 31, 13, 16, 10, 45, 24, 26, 77, 10, 60, 81, 61, 34, 54, 70, 21, 15, 4, 66, 77, 42, 37, 30, 22, 0, 11, 41, 72, 57, 20, 23, 57, 65, 41, 23, 18, 72, 42, 5, 3, 26, 78, 8, 5, 54, 45, 77, 25, 64, 61, 16, 44, 54, 51, 20, 63, 25, 11, 26, 45, 53, 60, 38, 34),
##            (76, 66, 5, 49, 75, 54, 69, 46, 32, 1,  42, 60, 26, 48, 50, 80, 32, 24, 55, 61, 47, 12, 21, 12, 49, 54, 34, 25, 36, 15, 56, 55, 20, 9, 8, 62, 13, 82, 9, 44, 29, 60, 53, 82, 42, 80, 5, 43, 71, 3, 80, 77, 47, 78, 34, 25, 62, 18, 10, 49, 62, 64, 52, 81, 11, 66, 62, 13, 47, 17, 52, 70, 26, 23, 32, 31, 64, 23, 35, 32, 50, 6, 1, 25, 8, 37, 47, 43, 26, 76, 65, 68, 80, 17, 7, 45, 63, 14, 53, 63, 60, 16),
##            (63, 66, 5, 49, 75, 54, 2,  60, 29, 40, 78, 47, 60, 75, 67, 71, 60, 2,  65, 7,  47, 14, 45, 74, 59, 41, 80, 13, 60, 13, 81, 22, 35, 50, 40, 39, 2, 59, 48, 31, 76, 2, 80, 75, 1, 56, 67, 11, 21, 8, 40, 65, 45, 75, 55, 39, 60, 42, 13, 3, 22, 57, 2, 6, 58, 9, 70, 1, 58, 56, 63, 68, 25, 79, 7, 20, 19, 64, 2, 66, 73, 30, 71, 16, 12, 30, 65, 37, 20, 13, 22, 63, 18, 46, 64, 59, 41, 81, 82, 22, 78, 36, 47, 17, 4, 6, 17, 5, 36, 79, 63, 1, 64, 69, 15, 43, 4, 58, 56, 31, 14, 64, 58, 18, 44, 78, 69, 1, 0, 46, 20, 71, 73, 25, 35, 8, 24),
##            (34, 66, 5, 49, 75, 54, 23, 74, 11, 13, 28, 26, 19, 48, 67, 57, 37, 60, 34, 28, 74, 10, 17, 32, 11, 18, 19, 43, 19, 81, 42, 4, 62, 9, 46, 49, 32, 51, 76, 58, 4, 43, 47, 17, 67, 79, 21, 32, 44, 16, 30, 37, 26, 28, 41, 68, 57, 34, 51, 10, 69, 70, 8, 6, 46, 43, 18, 39, 47, 43, 15, 13, 33, 30, 35, 62, 37, 0, 37, 5, 38, 55, 37, 13, 40, 25, 9, 21, 11, 64, 5, 79, 42, 68, 11, 71, 11, 48, 3, 67, 61, 40, 22, 14, 35, 50, 61, 39, 11, 2, 66, 49, 51, 53, 17, 73, 36, 75, 74, 54, 24, 30, 54, 70),
##            (27, 66, 5, 49, 75, 54, 2,  60, 29, 40, 2,  55, 9,  15, 59, 18, 68, 3,  36, 5,  47, 77, 44, 38, 1,  18, 28, 76, 4,  34, 60, 63, 58, 80, 17, 54, 79, 75, 48, 54, 55, 19, 62, 64, 14, 47, 51, 70, 75, 5, 11, 47, 45, 58, 68, 69, 79, 25, 38, 45, 73, 47, 68, 50, 34, 45, 78, 26, 79, 57, 4, 56, 22, 60, 18, 75, 43, 60, 59, 67, 63, 42, 49, 33, 40, 65, 79, 77, 7, 3, 26, 62, 31, 78, 26, 57, 69, 40, 4, 23, 26, 13, 67, 42, 38, 72, 11, 39, 65, 60, 25, 6, 80, 66, 68, 77, 59, 78, 19),
##            (77, 66, 5, 49, 75, 54, 2,  60, 29, 40, 2,  55, 9,  15, 59, 18, 68, 3,  36, 5,  47, 60, 21, 80, 1,  72, 55, 16, 82, 35, 57, 19, 1, 66, 18, 27, 39, 17, 74, 81, 39, 14, 78, 0, 25, 65, 43, 66, 64, 38, 81, 23, 24, 50, 57, 30, 71, 75, 26, 68, 54, 57, 56, 50, 71, 73, 14, 21, 8, 32, 26, 63, 5, 37, 19, 43, 66, 47, 53, 34, 66, 23, 73, 31, 54, 38, 77, 67, 11, 63, 79, 6, 22, 21, 51, 69, 74, 21, 5, 17, 67, 37, 29, 21, 60, 14, 82, 44, 30, 4, 20, 42, 35, 1, 31, 54, 46, 20, 40, 30),
##            (33, 66, 5, 49, 75, 54, 2,  60, 29, 40, 2,  55, 9,  15, 59, 18, 68, 3,  36, 5,  47, 33, 21, 59, 44, 18, 28, 76, 59, 34, 60, 63, 79, 27, 12, 54, 5, 49, 48, 54, 55, 52, 62, 72, 69, 10, 57, 22, 58, 48, 67, 53, 7, 34, 32, 30, 31, 19, 26, 8, 34, 46, 7, 30, 71, 55, 34, 75, 54, 9, 6, 60, 5, 23, 25, 45, 42, 80, 25, 12, 22, 76, 20, 51, 62, 21, 40, 9, 41, 10, 44, 73, 8, 33, 70, 73, 6, 31, 21, 72, 5, 40, 61, 51, 42, 66, 64, 74, 61, 25, 63, 42, 24, 41))
##

#messages = [[81, 21, 74, 24, 7, 20, 52, 6, 45, 9, 34, 7, 25, 62, 2, 36, 44, 75, 15, 52, 45, 21, 22, 30, 65, 38, 46, 72, 0, 44, 76, 18, 55, 32, 60, 63, 53, 52, 81, 72, 52, 61, 70, 77, 25, 49, 22, 21, 9, 64, 29, 57, 12, 36, 13, 18, 67, 6, 76, 27, 36, 57, 2, 39, 14, 8, 9, 21, 51, 17, 73, 43, 11, 18, 8, 68, 32, 51, 54, 60, 18, 75, 53, 29, 33, 9, 60, 33, 54, 27, 70, 30, 60, 34, 68, 25, 64, 43, 64, 73, 6, 46, 24, 23, 18, 32, 39, 49, 18, 36, 63, 22, 77, 21, 72, 3, 47, 70, 19, 41, 34, 11, 67, 76, 74, 64, 17, 21, 33, 7, 44, 44, 26, 19, 71, 76, 21, 23, 5, 0, 80, 6, 70, 20, 82, 24, 12, 66, 1, 31, 70, 33, 39, 31, 63, 53, 49, 38, 16, 40, 9, 56, 0, 70], [39, 26, 42, 43, 24, 20, 10, 38, 82, 29, 59, 72, 32, 75, 41, 69, 1, 31, 30, 28, 76, 63, 79, 16, 60, 31, 54, 12, 16, 41, 74, 46, 66, 3, 45, 33, 31, 74, 48, 59, 26, 59, 31, 40, 24, 24, 81, 7, 10, 19, 82, 29, 28, 54, 43, 56, 38, 34, 34, 76, 46, 3, 16, 67, 42, 62, 14, 53, 60, 14, 74, 19, 44, 13, 15, 47, 32, 73, 49, 61, 20, 4, 62, 77, 78, 41, 61, 10, 6, 4, 19, 29, 48, 81, 2, 53, 64, 25, 34, 24, 30, 34, 29, 1, 39, 33, 57, 22, 58, 20, 51, 38, 22, 70, 68, 62, 12, 79, 15, 42, 74, 7, 79, 72, 57, 2, 70, 27, 34, 79, 33, 27, 39, 60, 33, 18, 67, 45, 25, 70, 34, 12, 64, 29, 30, 34, 13, 66, 22, 28, 50, 79, 44, 71, 82, 20, 49, 39, 38, 44, 71, 79, 36, 19, 79, 7, 8, 57, 68, 33, 4, 44, 61, 56, 17, 74, 30, 27, 29, 75, 6, 73, 75, 64, 14, 52, 74, 55, 32, 44, 45, 79, 0, 36, 11, 77, 59, 49, 51], [2, 66, 74, 61, 71, 64, 61, 15, 5, 59, 22, 56, 82, 8, 69, 24, 44, 15, 15, 62, 73, 25, 34, 29, 68, 10, 37, 31, 4, 18, 11, 39, 72, 66, 60, 61, 48, 39, 57, 61, 62, 45, 32, 9, 49, 14, 26, 21, 23, 21, 60, 41, 33, 39, 81, 6, 58, 78, 64, 46, 71, 73, 17, 68, 77, 81, 58, 28, 65, 17, 35, 28, 76, 82, 81, 33, 52, 69, 27, 63, 77, 77, 81, 12, 56, 68, 28, 21, 82, 65, 62, 55, 60, 61, 24, 9, 26, 4, 4, 29, 48, 36, 6, 62, 80, 79, 76, 47, 9, 11, 35, 55, 60, 70, 50, 69, 8, 56, 44, 33, 61, 56, 61, 25, 38, 45, 5, 23, 34, 61, 41], [41, 76, 49, 60, 68, 40, 76, 19, 27, 55, 61, 49, 25, 77, 51, 20, 7, 60, 60, 27, 52, 37, 44, 37, 70, 57, 46, 16, 67, 18, 81, 67, 15, 39, 5, 40, 71, 6, 57, 59, 81, 51, 31, 59, 42, 43, 17, 19, 7, 70, 41, 57, 60, 23, 78, 64, 69, 11, 81, 24, 52, 65, 53, 14, 25, 47, 44, 49, 49, 6, 38, 7, 26, 32, 56, 32, 70, 73, 49, 17, 17, 76, 35, 29, 45, 68, 9, 80, 3, 82, 30, 34, 82, 30, 70, 19, 69, 45, 58, 42, 44, 19, 15, 57, 7, 32, 24, 19, 12, 51, 63, 13, 41, 58, 37, 8, 13, 7, 40, 79, 65, 23], [0, 1, 24, 8, 42, 20, 63, 3, 2, 76, 26, 2, 14, 37, 46, 5, 29, 52, 73, 19, 11, 50, 17, 64, 9, 51, 11, 76, 39, 34, 51, 61, 38, 19, 65, 69, 23, 56, 11, 73, 73, 1, 25, 49, 78, 14, 70, 3, 80, 32, 75, 22, 82, 80, 70, 72, 73, 62, 6, 44, 14, 16, 27, 30, 17, 51, 44, 19, 47, 31, 26, 59, 57, 25, 52, 33, 52, 20, 77, 59, 18, 73, 32, 65, 67, 51, 42, 35, 80, 73, 19, 50, 82, 64, 7, 9, 14, 44, 12, 20, 0, 64, 30, 15, 60, 64, 81, 64, 49, 2, 38, 74, 76, 25, 41, 51], [45, 75, 68, 70, 21, 78, 43, 47, 45, 54, 16, 41, 58, 42, 62, 4, 8, 14, 22, 38, 20, 62, 22, 57, 76, 11, 20, 51, 43, 35, 28, 81, 31, 39, 70, 70, 61, 61, 1, 67, 47, 43, 41, 67, 67, 14, 80, 23, 32, 29, 31, 13, 33, 64, 3, 80, 26, 56, 0, 53, 11, 73, 60, 22, 66, 62, 21, 11, 63, 31, 48, 27, 39, 77, 35, 49, 41, 49, 34, 50, 3, 39, 66, 5, 30, 24, 44, 8, 0, 6, 24, 56, 82, 52, 28, 9, 70, 26, 33, 43, 26, 79, 6, 10, 67, 3, 67, 1, 0, 31, 40, 48, 78, 25, 68, 57, 4, 23, 62, 33, 52, 11, 59, 13, 68, 70, 8, 36, 76, 50, 82, 33, 19, 56, 68, 28, 3, 67, 32, 66, 5, 55, 46, 16, 41, 40, 28, 62, 47, 58, 6, 60, 59, 43, 52, 1, 16, 9, 53, 26, 27, 77, 1, 39, 19, 51, 63, 25, 7, 34, 42, 9, 6, 4, 31, 41, 31, 7, 59, 26, 25, 44, 8, 15, 60, 26, 52, 29, 20, 65, 73, 68, 12, 73, 63, 38, 27, 77, 31, 39, 69, 79, 48, 26, 77, 40, 58, 45, 67, 17, 61, 0, 78, 80, 31, 35, 17, 10, 75, 42, 4, 14, 49, 38, 31, 76, 46, 3, 17, 19, 72, 50, 69, 18], [8, 66, 67, 31, 27, 20, 38, 70, 21, 55, 22, 71, 81, 68, 21, 56, 12, 33, 80, 28, 35, 80, 68, 63, 68, 44, 20, 35, 29, 81, 62, 31, 72, 70, 68, 33, 18, 36, 66, 48, 2, 27, 22, 9, 32, 64, 4, 17, 2, 22, 48, 40, 2, 30, 4, 24, 44, 53, 70, 33, 35, 29, 16, 28, 32, 75, 39, 79, 54, 64, 12, 30, 76, 17, 15, 35, 56, 59, 79, 22, 46, 68, 39, 23, 59, 28, 60, 13, 13, 73, 48, 34, 82, 62, 41, 60, 76, 26, 64, 48, 43, 82, 6, 30, 8, 64, 25, 16, 58, 74, 69, 55, 28, 62, 23, 75, 81, 43, 15, 35, 61, 68, 76, 58, 18, 60, 44, 40, 2, 72, 26, 28, 43, 34, 25, 63, 65, 80, 56, 73, 43, 24, 44, 10, 82, 50, 10, 16, 24, 4, 9, 38, 52, 35, 29, 7, 0, 40, 62, 39, 63, 43, 54, 7, 75, 1, 47, 11, 54, 27, 65, 46, 67], [4, 3, 36, 28, 18, 22, 7, 35, 34, 16, 48, 77, 77, 53, 28, 31, 21, 43, 51, 67, 60, 52, 34, 76, 40, 36, 34, 1, 35, 18, 18, 3, 13, 11, 38, 11, 5, 37, 15, 27, 26, 22, 33, 59, 32, 47, 72, 42, 33, 34, 43, 68, 19, 64, 3, 25, 31, 34, 31, 76, 46, 3, 65, 14, 32, 11, 43, 40, 34, 6, 55, 36, 38, 47, 40, 57, 22, 24, 42, 40, 63, 19, 59, 14, 69, 68, 16, 14, 36, 49, 73, 40, 16, 68, 65, 60, 44, 54, 31, 44, 22, 21, 77, 60, 41, 22, 12, 50, 10, 54, 1, 58, 37, 78, 42, 69, 49, 49, 47, 66, 46, 43, 61, 58, 45, 62, 33, 27, 47, 30, 21, 34, 45, 48, 29, 23, 67, 57, 64, 49, 6, 22, 31, 34, 3, 59, 18, 21, 31, 56, 58, 12, 1, 43, 2, 55, 78, 40, 33, 23, 51, 72, 22, 51, 26, 51, 20, 41, 48, 59, 26, 20, 36, 29, 21, 26, 60, 3, 23, 1, 41, 6, 19, 73, 71, 60, 21, 54, 17, 32, 13, 49, 54, 48, 10, 9, 64, 60, 8, 49, 44, 55, 63, 47, 68, 1, 75, 34, 66, 78, 46, 49, 53, 21, 75, 51, 43, 68, 41, 22, 42, 6, 58, 40, 72, 16, 31, 60, 6, 12, 44, 50, 53, 58, 35, 52, 71, 43, 75, 13, 65, 2, 70, 55, 47, 15, 40, 42, 81, 25, 2, 55, 80, 37, 7, 76, 39, 22, 57, 44, 5, 53, 47, 43, 67, 80, 73, 21, 39, 21, 82, 64, 44, 33, 21, 77, 47, 39, 39, 5, 27, 32, 39, 29, 56, 47, 82, 1, 66, 47, 49, 58, 8, 35, 48, 61, 44, 75, 82, 76, 9, 22, 7, 4, 72, 45, 53, 47, 31, 54, 46, 70, 73, 4, 55, 3, 20, 36, 1, 22, 57, 38, 8, 49, 81, 69, 76, 82, 56, 12, 51, 72, 63, 2, 3, 42, 81, 22, 70, 58, 45, 40, 7, 82, 67, 12, 41, 58, 58, 14, 46, 52, 29, 59, 40, 65, 50, 44, 37, 71, 29, 46, 0, 41, 15, 70, 9, 12], [61, 72, 74, 24, 81, 23, 70, 61, 45, 45, 9, 7, 53, 70, 21, 58, 81, 51, 80, 6, 56, 59, 4, 76, 40, 34, 15, 35, 71, 10, 50, 46, 23, 3, 65, 57, 39, 54, 11, 40, 26, 75, 8, 64, 27, 60, 17, 24, 22, 4, 30, 56, 42, 53, 5, 45, 36, 1, 0, 12, 51, 43, 3, 24, 44, 49, 76, 32, 75, 58, 71, 5, 32, 0, 26, 82, 0, 75, 79, 30, 12, 50, 31, 52, 33, 62, 50, 8, 55, 44, 82, 50, 69, 26, 41, 22, 8, 69, 14, 55, 69, 80, 22, 81, 54, 40, 23, 32, 51, 59, 53, 63, 18, 46, 76, 82, 80, 33, 11, 36, 74, 74, 52, 34, 74, 72, 59, 38, 59, 21, 14, 77, 33, 60, 10, 46, 28, 67, 23, 39, 43, 82, 59, 20, 52, 66, 81, 69, 53, 40, 16, 21, 15, 26, 43, 81, 74, 10, 12, 64, 46, 80, 1, 60, 74, 50, 54, 67, 78, 18, 33, 11, 3, 29, 80, 82, 30, 66, 2, 65, 6, 77, 48, 15, 72, 14, 65, 51, 27, 81, 32, 64, 63, 73, 71, 50, 81, 75, 35, 43, 56, 2, 63, 43, 11, 73, 69, 45, 59, 10, 28, 17, 54, 6, 73, 36, 11, 67, 82, 53, 3, 4, 73, 36, 82, 14, 30, 2, 53, 55, 33, 66, 13, 28, 63, 40, 58, 55, 39, 49, 53, 82, 13, 78, 43, 21, 27, 36, 59, 25, 67, 78, 23, 27, 20, 4, 35, 19, 41, 76, 16, 37, 32, 76, 44, 3]]


sm = """]SgTOC[:^!+gZ\M/nAN.WY'@Sag$GR @j%#C'M=j`Ol?D$h],-qp.o%",<(T4i@InJR,^EHWYMX`fiLgJ68_1E;OlLm+o#>*=P;9Y]n7.;b> <q+a;Z3lM?rGZC-LB7JGCiK7c&iSgT%4@jFTG3d)U5NV8] -Up94"S(a64'L+AoGWd_L^?aVR_'XVC*Dj.CeL^DcO\'<+o$0,q+F;R>/poW>1LIDENO0k'BAoh3k1m`J3,XVZi*XJ#1UJ%>=crR2SPHrY]mS7c90CeBjoh6lMBo&\]*KBgG&3>MngNbM(;Gb[-EG#d)/XTfl]IUp`Z01D!HFke
]SgTOC[:^!+gThe<5VCi,-L?p.b\<K!+oF3]'=pN0Y_1q+$G0>,EFCkI?VTh0"e@<=5`3k1Qchb),mp&i@=5.#[/($b'mAF41Q!G#Y" jWi 5A7r92>lUP(G&"IXgrdC:1MScfdMX7TOblIX5a$&\)/jHh:IUp`Z01D!HFV0"L=EA.6]?qgTf] E5JWC"'mDV$k[=jo$\mXjo4'Kmqa%O (HZ6',nqPHTWR_Kj`TR<=(p6Yi_<?.Zf'/nFZ"eBU5`cTZ>]mDr;4*=+Hb'1Ipc30[MB(phk
]SgTOC[IagfY:L+T\)lK^XP`c9C\*Dj%bi]'Lq+9O_LXV$%C[)1<-q$h2'1/BnPaoW%hie^!aJk*L5!JV&YMm5Z9[@<*EJOlLjF4_=p%[mEpoJfRk1mS!9:Q!&63"e=BXFVhbR>IUrGi/cN$3Yma$d4KU5Jd)Uo94Y]I?FG21<?rdY2,S!NR@Q+gdO'DEG[)MEJCK=!hfCl^`6#Y:)@BE;fi@U.o$O82e,SDN0)IDPH0\<Pc&0eIp.#R'^?J3,QUc%0eBNG6#Yi/E
]SgTOC[Iag63'@?rfY'P$&\LPpV$OCM@E.d0@n$O@*Uqj!Z62/(HT2 Q`$kYi m`#Ol]m^Xc&blnqFf6#e',Q.;i@=p%i/Erd]mA;k<q$&8e^ar9&\Sg#\/QU5H634 S5phOblKXp`Fd2]XVW9e?AVW[ /jV0 (H9O Ln!`W"\mQXJfO'DoZ\KDpoCYl1=NfRYe-Egd,S(Af6_,I^=E(o;%ZiI=DqV0iKA&C*^A`T9_*mQ(.V9_1/n5JOY,-nqcJOb@(j$d]<jcHW6, <?5AV3\-^qN&\Sq7NR[lMS(T3b*D5%3: PEgrF&3'm"""

messages = []
for m in sm.split("\n"):
    n = []
    for c in m:
        n.append(ord(c)-32)
    messages.append(n)

if USE_50_PLUS:
    nm = []
    for m in messages:
        nm.append(m[50:])

    messages = nm



if RANDOM_MESSAGE:
    oldm = messages
    messages = []
    for i in range(len(oldm)):
        messages.append([])
        
        for j in range(len(oldm[i])):

            if not PRESERVE_REPEATED:
                messages[-1].append(random.randint(0,82))

            else:
            
                #preserve repeated sections
                for k in range(i):
                    
                    try :
                        if oldm[i][j] == oldm[k][j]:
                            messages[-1].append(messages[k][j])
                            break
                    except IndexError:
                        pass
                else:
                    messages[-1].append(random.randint(0,82))

def analyse(name,dataset):
    if not dataset:
        dataset = [0,0]
    avg = sum(dataset)/len(dataset)
    lower_quart_s = tuple(filter(lambda a: a<=avg, dataset))
    if lower_quart_s:
        lower_quart = sum(lower_quart_s)/len(lower_quart_s)
    else:
        lower_quart = 0
    upper_quart_s = tuple(filter(lambda a: a>=avg, dataset))
    if upper_quart_s:
        upper_quart = sum(upper_quart_s)/len(upper_quart_s)
    else:
        upper_quart = 0
    dataset.sort()
    median = dataset[len(dataset)//2]
    print(name, round(min(dataset),2), round(lower_quart,2), round(avg,2), round(median,2), round(stdev(dataset), 2), round(upper_quart,2), round(max(dataset),2))



def IoC(messages, precalc=True):

    mmin = 0
    mmax = 82
    
    n = [0]*(mmax - mmin + 1)
    amount = 0
    for m in messages:
        amount += len(m)
        for c in m:
            
            n[c - mmin] += 1

    if amount <= 1:
        return 0,0

    ic = 0
    for i in n:
        ic += i*(i-1)

    if precalc:
        return ic / (amount * (amount - 1) / (mmax - mmin + 1))

    return ic , (amount * (amount - 1) / (mmax - mmin + 1))



def scoreKey(key):
    global messages

    nm = []

    for m in messages:
        for i in range(len(m)-1):
            nm.append((key[m[i]] - key[m[i+1]]) % 83)

    return stdev(nm) #* 10 + IoC([nm])
    #return IoC([nm])
    #return len(set(nm))

##    a = []
##    
##    for m in messages:
##        for i in range(len(m)-1):
##            a.append((key[m[i]] - key[m[i+1]]) % 83)
##
##    b = [a.count(i) for i in set(a)]
##    b.sort()
##
##    return stdev(b) #* 100 + b[0]*10 + b[20]



##
##nm = []
##
##test_alph = list(range(83))
##r = random.Random(0)
##r.shuffle(test_alph)
##
##print(test_alph)
##
##
##for m in messages:
##    n = []
##    j = 0
##    for i in range(len(m)):
##        j += random.randint(1,40)
##        j %= 83
##        n.append(test_alph[j])
##    nm.append(n)
##
##messages = nm

def getTestScore(key):
    d = set()
    for i in range(83):
        d.add((test_alph[i] - key[i]) % 83)
        
    return len(d)
    


    
def getAnnealingScore(start_key = None):
    best_key = list(range(83))

    if start_key:
        best_key = start_key


    current_score = scoreKey(best_key)

    swaps = 64


    while swaps >= 1:
        print(swaps, current_score)
        new_best_key = None
        new_best_score = current_score
        for i in range(REPEATS_BEFORE_SKIP):
            new_key = best_key[:]

            for j in range(swaps):
                i1 = random.randint(0,82)
                i2 = random.randint(0,82)
                t = new_key[i1]
                new_key[i1] = new_key[i2]
                new_key[i2] = t

            score = scoreKey(new_key)

            if score > new_best_score:
                new_best_score = score
                new_best_key = new_key

        if new_best_key:
            best_key = new_best_key
            current_score = new_best_score
        else:
            swaps //= 2
            invert_key = [None]*83
            for i in range(83):
                invert_key[best_key[i]] = i
            print(best_key,invert_key)
        

    return best_key, current_score

best_key, current_score = getAnnealingScore()

invert_key = [None]*83
for i in range(83):
    invert_key[best_key[i]] = i

print(best_key, invert_key)



##n = []
##
##for i in range(20):
##    print(i)
##    n.append(getAnnealingScore()[1])
##
##n.sort()
##
##analyse(0, n)


        
        


            
                 

                
        
        
        
    
    
    

















