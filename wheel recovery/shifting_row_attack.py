from collections import Counter, defaultdict as ddict; from itertools import chain
from matplotlib import pyplot as plt; import numpy as np

# --

all_eyes = [[50, 66, 5, 48, 62, 13, 75, 29, 24, 61, 42, 70, 66, 62, 32, 14, 81, 8, 15, 78, 2, 29, 13, 49, 1, 80, 82, 40, 63, 81, 21, 19, 0, 40, 51, 65, 26, 14, 21, 70, 47, 44, 48, 42, 19, 48, 13, 47, 19, 49, 72, 31, 5, 24, 3, 43, 59, 67, 33, 49, 41, 60, 21, 26, 30, 5, 25, 20, 71, 11, 74, 56, 4, 74, 19, 71, 4, 51, 41, 43, 80, 72, 54, 63, 79, 81, 15, 16, 44, 31, 30, 12, 33, 57, 28, 13, 64, 43, 48], [80, 66, 5, 48, 62, 13, 75, 29, 24, 61, 42, 70, 66, 62, 32, 14, 81, 8, 15, 78, 2, 29, 13, 49, 1, 29, 11, 30, 52, 81, 21, 19, 0, 25, 26, 54, 20, 14, 21, 70, 47, 44, 48, 42, 19, 48, 13, 47, 19, 49, 44, 26, 59, 77, 64, 43, 79, 28, 72, 64, 1, 30, 73, 23, 67, 6, 33, 25, 64, 81, 68, 46, 17, 36, 13, 17, 21, 68, 13, 9, 46, 67, 57, 34, 62, 82, 15, 10, 73, 62, 2, 11, 65, 72, 37, 44, 10, 43, 68, 62, 9, 34, 18], [36, 66, 5, 48, 62, 13, 75, 29, 24, 61, 42, 70, 66, 62, 32, 14, 81, 8, 15, 78, 2, 29, 13, 49, 1, 69, 76, 52, 9, 48, 66, 80, 22, 64, 57, 40, 49, 78, 3, 16, 56, 19, 47, 40, 80, 6, 13, 64, 29, 49, 64, 63, 6, 49, 31, 13, 16, 10, 45, 24, 26, 77, 10, 60, 81, 61, 34, 54, 70, 21, 15, 4, 66, 77, 42, 37, 30, 22, 0, 11, 41, 72, 57, 20, 23, 57, 65, 41, 23, 18, 72, 42, 5, 3, 26, 78, 8, 5, 54, 45, 77, 25, 64, 61, 16, 44, 54, 51, 20, 63, 25, 11, 26, 45, 53, 60, 38, 34], [76, 66, 5, 49, 75, 54, 69, 46, 32, 1, 42, 60, 26, 48, 50, 80, 32, 24, 55, 61, 47, 12, 21, 12, 49, 54, 34, 25, 36, 15, 56, 55, 20, 9, 8, 62, 13, 82, 9, 44, 29, 60, 53, 82, 42, 80, 5, 43, 71, 3, 80, 77, 47, 78, 34, 25, 62, 18, 10, 49, 62, 64, 52, 81, 11, 66, 62, 13, 47, 17, 52, 70, 26, 23, 32, 31, 64, 23, 35, 32, 50, 6, 1, 25, 8, 37, 47, 43, 26, 76, 65, 68, 80, 17, 7, 45, 63, 14, 53, 63, 60, 16], [63, 66, 5, 49, 75, 54, 2, 60, 29, 40, 78, 47, 60, 75, 67, 71, 60, 2, 65, 7, 47, 14, 45, 74, 59, 41, 80, 13, 60, 13, 81, 22, 35, 50, 40, 39, 2, 59, 48, 31, 76, 2, 80, 75, 1, 56, 67, 11, 21, 8, 40, 65, 45, 75, 55, 39, 60, 42, 13, 3, 22, 57, 2, 6, 58, 9, 70, 1, 58, 56, 63, 68, 25, 79, 7, 20, 19, 64, 2, 66, 73, 30, 71, 16, 12, 30, 65, 37, 20, 13, 22, 63, 18, 46, 64, 59, 41, 81, 82, 22, 78, 36, 47, 17, 4, 6, 17, 5, 36, 79, 63, 1, 64, 69, 15, 43, 4, 58, 56, 31, 14, 64, 58, 18, 44, 78, 69, 1, 0, 46, 20, 71, 73, 25, 35, 8, 24], [34, 66, 5, 49, 75, 54, 23, 74, 11, 13, 28, 26, 19, 48, 67, 57, 37, 60, 34, 28, 74, 10, 17, 32, 11, 18, 19, 43, 19, 81, 42, 4, 62, 9, 46, 49, 32, 51, 76, 58, 4, 43, 47, 17, 67, 79, 21, 32, 44, 16, 30, 37, 26, 28, 41, 68, 57, 34, 51, 10, 69, 70, 8, 6, 46, 43, 18, 39, 47, 43, 15, 13, 33, 30, 35, 62, 37, 0, 37, 5, 38, 55, 37, 13, 40, 25, 9, 21, 11, 64, 5, 79, 42, 68, 11, 71, 11, 48, 3, 67, 61, 40, 22, 14, 35, 50, 61, 39, 11, 2, 66, 49, 51, 53, 17, 73, 36, 75, 74, 54, 24, 30, 54, 70], [27, 66, 5, 49, 75, 54, 2, 60, 29, 40, 2, 55, 9, 15, 59, 18, 68, 3, 36, 5, 47, 77, 44, 38, 1, 18, 28, 76, 4, 34, 60, 63, 58, 80, 17, 54, 79, 75, 48, 54, 55, 19, 62, 64, 14, 47, 51, 70, 75, 5, 11, 47, 45, 58, 68, 69, 79, 25, 38, 45, 73, 47, 68, 50, 34, 45, 78, 26, 79, 57, 4, 56, 22, 60, 18, 75, 43, 60, 59, 67, 63, 42, 49, 33, 40, 65, 79, 77, 7, 3, 26, 62, 31, 78, 26, 57, 69, 40, 4, 23, 26, 13, 67, 42, 38, 72, 11, 39, 65, 60, 25, 6, 80, 66, 68, 77, 59, 78, 19], [77, 66, 5, 49, 75, 54, 2, 60, 29, 40, 2, 55, 9, 15, 59, 18, 68, 3, 36, 5, 47, 60, 21, 80, 1, 72, 55, 16, 82, 35, 57, 19, 1, 66, 18, 27, 39, 17, 74, 81, 39, 14, 78, 0, 25, 65, 43, 66, 64, 38, 81, 23, 24, 50, 57, 30, 71, 75, 26, 68, 54, 57, 56, 50, 71, 73, 14, 21, 8, 32, 26, 63, 5, 37, 19, 43, 66, 47, 53, 34, 66, 23, 73, 31, 54, 38, 77, 67, 11, 63, 79, 6, 22, 21, 51, 69, 74, 21, 5, 17, 67, 37, 29, 21, 60, 14, 82, 44, 30, 4, 20, 42, 35, 1, 31, 54, 46, 20, 40, 30], [33, 66, 5, 49, 75, 54, 2, 60, 29, 40, 2, 55, 9, 15, 59, 18, 68, 3, 36, 5, 47, 33, 21, 59, 44, 18, 28, 76, 59, 34, 60, 63, 79, 27, 12, 54, 5, 49, 48, 54, 55, 52, 62, 72, 69, 10, 57, 22, 58, 48, 67, 53, 7, 34, 32, 30, 31, 19, 26, 8, 34, 46, 7, 30, 71, 55, 34, 75, 54, 9, 6, 60, 5, 23, 25, 45, 42, 80, 25, 12, 22, 76, 20, 51, 62, 21, 40, 9, 41, 10, 44, 73, 8, 33, 70, 73, 6, 31, 21, 72, 5, 40, 61, 51, 42, 66, 64, 74, 61, 25, 63, 42, 24, 41]]

npeyes = [np.array(a) for a in all_eyes]; npalleyes = np.hstack(npeyes)

test_data = [[35, 19, 6, 23, 11, 23, 76, 54, 43, 58, 67, 33, 6, 24, 74, 17, 6, 73, 41, 46, 14, 65, 21, 9, 1, 33, 37, 29, 7, 77, 76, 9, 3, 21, 13, 34, 63, 28, 57, 69, 73, 74, 4, 56, 5, 4, 5, 18, 60, 21, 69, 12, 19, 21, 60, 44, 59, 56, 22, 59, 8, 18, 68, 15, 60, 47, 78, 15, 78, 2, 43, 42, 9, 29, 31, 80, 66, 10, 55, 82, 3, 62, 60, 53, 82, 6, 47, 10, 38, 28, 2, 43, 50, 67, 73, 6, 17, 7, 47, 6, 47, 71, 34, 2, 68, 3, 70, 58, 52, 74, 32, 44, 77, 12, 53, 51, 32, 74, 11, 38, 75, 24, 32, 8, 9, 77, 40, 52, 13, 20, 64, 60, 16, 61, 31, 20, 9, 20, 13, 69, 16, 66, 55, 69, 29, 45, 56, 40, 24, 43, 42, 1, 47, 5, 46, 10, 22, 79, 43, 49, 11, 19, 42, 0], [55, 55, 27, 29, 60, 23, 28, 73, 29, 82, 47, 2, 41, 68, 72, 50, 53, 46, 72, 46, 67, 11, 6, 71, 13, 38, 37, 68, 21, 37, 3, 53, 41, 38, 68, 14, 60, 65, 38, 34, 4, 53, 74, 63, 44, 13, 77, 21, 24, 12, 44, 79, 75, 0, 44, 55, 14, 18, 39, 19, 78, 81, 75, 23, 35, 81, 63, 5, 26, 43, 78, 44, 23, 0, 3, 42, 66, 65, 49, 42, 82, 0, 72, 29, 76, 10, 76, 62, 47, 27, 76, 26, 35, 37, 76, 6, 17, 14, 74, 1, 77, 41, 25, 12, 70, 80, 68, 74, 36, 7, 36, 71, 27, 71, 67, 58, 39, 58, 69, 5, 65, 61, 77, 28, 18, 44, 77, 44, 34, 42, 67, 41, 25, 8, 51, 66, 13, 52, 80, 10, 18, 29, 54, 78, 12, 28, 80, 40, 45, 57, 18, 49, 30, 64, 46, 26, 22, 66, 2, 7, 18, 23, 2, 55, 49, 38, 60, 37, 27, 23, 45, 81, 60, 45, 55, 35, 35, 43, 34, 68, 72, 65, 67, 47, 47, 46, 14, 21, 3, 14, 61, 36, 3, 9, 7, 77, 73, 75, 36], [60, 1, 6, 76, 1, 38, 60, 68, 32, 82, 26, 74, 41, 58, 51, 47, 6, 2, 41, 4, 2, 4, 73, 39, 7, 34, 37, 75, 8, 32, 74, 33, 4, 34, 13, 51, 24, 2, 34, 78, 14, 67, 18, 14, 74, 14, 75, 18, 63, 55, 8, 22, 10, 18, 27, 31, 59, 39, 35, 15, 28, 81, 82, 23, 66, 13, 28, 10, 49, 2, 48, 76, 72, 10, 48, 10, 51, 17, 77, 35, 54, 42, 51, 1, 3, 27, 58, 35, 82, 26, 32, 23, 50, 67, 50, 45, 26, 26, 11, 1, 72, 16, 46, 46, 20, 6, 44, 37, 59, 7, 36, 15, 39, 71, 36, 79, 21, 74, 36, 73, 79, 41, 78, 61, 28, 75, 34, 39, 34, 4, 4], [27, 19, 36, 47, 34, 37, 35, 76, 68, 46, 67, 39, 6, 11, 50, 50, 53, 2, 72, 58, 38, 33, 21, 11, 74, 59, 37, 75, 8, 32, 37, 20, 4, 9, 80, 14, 81, 56, 34, 34, 13, 24, 74, 21, 20, 8, 59, 79, 8, 55, 42, 12, 52, 66, 40, 13, 52, 38, 52, 30, 28, 54, 28, 23, 76, 80, 66, 64, 63, 48, 40, 0, 23, 30, 49, 80, 76, 65, 49, 82, 78, 29, 60, 53, 31, 27, 25, 72, 54, 43, 60, 7, 25, 35, 37, 3, 70, 76, 2, 70, 52, 26, 17, 3, 80, 3, 52, 20, 11, 17, 32, 43, 37, 81, 74, 73, 77, 51, 14, 24, 63, 9], [44, 50, 45, 49, 29, 23, 62, 57, 9, 54, 71, 76, 6, 17, 45, 11, 1, 33, 51, 1, 68, 11, 46, 46, 16, 32, 7, 78, 41, 37, 81, 11, 52, 65, 13, 73, 5, 4, 24, 40, 42, 67, 24, 63, 39, 14, 24, 12, 24, 42, 75, 14, 28, 56, 60, 10, 59, 12, 66, 16, 78, 57, 49, 57, 30, 13, 66, 40, 1, 81, 38, 42, 40, 17, 19, 10, 51, 24, 49, 2, 3, 27, 45, 17, 82, 7, 70, 37, 82, 35, 76, 9, 25, 29, 33, 45, 25, 72, 53, 37, 46, 67, 32, 12, 70, 3, 39, 37, 33, 38, 2, 38, 14, 20, 0, 36], [27, 73, 27, 70, 35, 49, 3, 12, 43, 11, 71, 70, 34, 68, 14, 11, 65, 2, 51, 25, 38, 68, 21, 68, 74, 36, 7, 36, 58, 53, 26, 67, 56, 9, 74, 36, 74, 79, 61, 32, 59, 27, 4, 14, 74, 14, 24, 44, 67, 16, 20, 48, 10, 18, 20, 18, 45, 49, 63, 80, 39, 81, 66, 51, 40, 81, 62, 10, 66, 81, 19, 69, 54, 57, 42, 10, 51, 30, 24, 60, 25, 70, 51, 29, 22, 45, 79, 45, 71, 43, 38, 7, 25, 48, 70, 45, 23, 51, 74, 1, 4, 16, 46, 1, 74, 73, 71, 72, 11, 35, 63, 56, 67, 20, 67, 56, 24, 44, 34, 73, 28, 24, 34, 13, 12, 4, 56, 16, 35, 46, 21, 14, 12, 62, 21, 75, 13, 44, 55, 69, 23, 60, 15, 59, 31, 75, 22, 19, 80, 28, 54, 26, 22, 28, 22, 71, 50, 19, 62, 78, 64, 49, 0, 6, 43, 54, 26, 35, 20, 15, 29, 27, 43, 24, 29, 25, 29, 33, 58, 26, 14, 11, 65, 2, 72, 58, 38, 33, 49, 70, 16, 46, 74, 46, 71, 32, 73, 28, 56, 9, 37, 53, 24, 36, 58, 16, 81, 67, 44, 40, 80, 4, 10, 75, 52, 26, 69, 56, 44, 16, 39, 12, 62, 18, 39, 19, 78, 81, 82, 60, 35, 30, 59, 28], [60, 1, 6, 31, 72, 23, 7, 2, 62, 46, 26, 29, 1, 32, 26, 6, 64, 9, 41, 46, 6, 20, 37, 70, 7, 34, 7, 36, 56, 12, 38, 79, 4, 34, 18, 14, 5, 58, 30, 44, 61, 21, 80, 14, 67, 81, 52, 56, 40, 15, 8, 22, 10, 21, 39, 80, 63, 79, 19, 71, 69, 5, 75, 22, 48, 76, 81, 5, 78, 48, 69, 10, 72, 57, 3, 27, 31, 24, 23, 62, 64, 10, 19, 29, 49, 36, 47, 71, 37, 35, 70, 7, 25, 11, 70, 27, 44, 51, 47, 43, 36, 77, 46, 37, 80, 3, 77, 58, 36, 16, 51, 15, 58, 38, 34, 57, 36, 15, 69, 1, 79, 15, 77, 81, 48, 20, 52, 15, 14, 59, 61, 33, 19, 4, 81, 22, 56, 8, 55, 59, 15, 13, 16, 69, 29, 45, 56, 40, 18, 43, 59, 49, 30, 48, 66, 81, 29, 19, 62, 76, 1, 71, 30, 47, 62, 31, 11, 37, 80, 29, 34, 26, 82], [59, 2, 54, 58, 52, 23, 27, 3, 7, 25, 71, 36, 9, 68, 45, 17, 35, 36, 19, 44, 26, 2, 73, 44, 51, 33, 67, 32, 51, 32, 37, 20, 4, 9, 77, 65, 61, 56, 38, 77, 4, 64, 57, 21, 67, 12, 59, 65, 14, 12, 62, 21, 75, 18, 20, 80, 10, 18, 39, 19, 78, 81, 82, 23, 48, 39, 48, 15, 52, 48, 15, 69, 54, 50, 19, 72, 48, 46, 5, 60, 76, 43, 25, 22, 44, 27, 55, 35, 33, 3, 2, 32, 25, 1, 70, 27, 27, 18, 17, 6, 4, 7, 0, 26, 20, 21, 36, 7, 34, 37, 32, 41, 14, 36, 74, 79, 32, 44, 11, 74, 2, 34, 78, 81, 67, 5, 80, 44, 12, 74, 18, 8, 78, 8, 79, 5, 13, 27, 13, 62, 56, 22, 30, 8, 81, 34, 22, 35, 24, 54, 10, 69, 30, 28, 0, 48, 23, 19, 10, 66, 10, 82, 62, 78, 78, 54, 10, 76, 80, 70, 54, 23, 28, 25, 62, 23, 27, 50, 65, 34, 72, 50, 53, 36, 7, 33, 12, 17, 46, 9, 13, 33, 37, 77, 56, 46, 20, 75, 73, 32, 16, 65, 73, 65, 15, 32, 4, 64, 3, 21, 59, 4, 10, 18, 52, 20, 62, 21, 52, 57, 59, 31, 59, 54, 55, 15, 48, 42, 64, 56, 40, 30, 63, 10, 35, 30, 64, 42, 14, 0, 48, 42, 76, 10, 64, 33, 30, 39, 51, 0, 50, 68, 76, 32, 36, 35, 6, 62, 50, 48, 33, 6, 6, 7, 6, 26, 36, 7, 33, 12, 4, 3, 14, 61, 8, 38, 2, 41, 11, 14, 9, 41, 9, 20, 65, 41, 65, 61, 13, 59, 48, 39, 56, 80, 14, 4, 64, 52, 13, 69, 59, 16, 82, 39, 10, 48, 79, 79, 30, 43, 18, 15, 50, 30, 11, 48, 25, 63, 30, 54, 76, 54, 0, 78, 0, 54, 5, 55, 36, 55, 22, 49, 26, 50, 63, 70, 11, 23, 76, 24, 43, 33, 47, 4, 3, 59, 72, 2, 43, 2, 71, 46, 6, 20, 37, 70, 7, 34, 37, 16, 56, 46, 38, 0, 4, 34, 37, 53], [35, 19, 6, 23, 11, 23, 76, 54, 43, 23, 11, 33, 6, 23, 26, 2, 64, 9, 41, 46, 4, 20, 79, 44, 51, 8, 52, 36, 51, 44, 61, 53, 33, 38, 13, 59, 75, 79, 24, 16, 4, 9, 24, 76, 44, 77, 59, 49, 44, 77, 75, 5, 75, 13, 20, 75, 63, 2, 63, 47, 27, 12, 63, 49, 40, 5, 23, 18, 80, 57, 64, 53, 64, 29, 49, 80, 7, 8, 23, 77, 55, 29, 38, 33, 82, 54, 58, 45, 17, 26, 55, 9, 80, 71, 70, 21, 58, 51, 23, 70, 61, 41, 61, 71, 17, 37, 77, 71, 32, 1, 65, 71, 32, 3, 34, 37, 52, 58, 65, 41, 65, 58, 39, 80, 9, 75, 21, 67, 31, 20, 21, 57, 15, 8, 56, 67, 57, 44, 75, 8, 15, 8, 46, 69, 57, 48, 13, 69, 13, 66, 29, 80, 42, 38, 42, 19, 33, 6, 0, 66, 46, 54, 0, 6, 43, 64, 53, 82, 45, 11, 10, 27, 29, 25, 76, 25, 35, 37, 25, 23, 72, 6, 43, 2, 17, 8, 71, 17, 79, 39, 71, 17, 41, 46, 51, 32, 37, 59, 73, 35, 74, 11, 73, 32, 24, 40, 28, 67, 58, 66, 52, 67, 81, 79, 8, 55, 42, 12, 28, 13, 20, 12, 59, 15, 8, 59, 28, 33, 28, 0, 60, 0, 59, 10, 66, 15, 5, 80, 54, 22, 1, 80, 31, 11, 71, 33, 7, 72, 25, 0, 82, 45, 31, 72, 23, 27, 3, 7, 25, 27, 47, 72, 30, 38, 11, 50]]

nptestdata = [np.array(a, dtype='u1') for a in test_data]


test_data_2 = [[36, 20, 69, 18, 21, 50, 1, 80, 23, 12, 21, 62, 58, 73, 17, 54, 73, 82, 77, 38, 77, 23, 46, 32, 82, 28, 67, 25, 29, 41, 30, 65, 79, 46, 14, 7, 38, 79, 50, 30, 74, 45, 39, 50, 8, 28, 9, 25, 79, 50, 38, 46, 22, 69, 51, 71, 62, 33, 27, 70, 72, 6, 71, 74, 1, 82, 13, 7, 16, 21, 33, 54, 70, 53, 10, 5, 34, 35, 73, 78, 69, 31, 37, 66, 72, 6, 19, 14, 1, 61, 12, 7, 20, 36, 13, 33, 67, 22, 61, 38, 3, 31, 27, 79, 12, 21, 78, 66, 18, 45, 59, 54, 60, 57, 80, 80, 79, 48, 8, 11, 61, 65, 45, 73, 39, 22, 66, 50, 68, 55, 68, 72, 56, 34, 66, 3, 30, 1, 1, 81, 49, 30, 43, 4, 34, 8, 71, 23, 81, 44, 26, 56, 39, 19, 40, 51, 35, 23, 7, 44, 76, 41, 69, 38], [11, 43, 8, 25, 1, 50, 78, 52, 25, 18, 42, 80, 1, 3, 68, 42, 60, 40, 28, 63, 29, 1, 13, 10, 73, 71, 71, 0, 64, 7, 10, 27, 31, 58, 19, 48, 63, 15, 51, 39, 56, 7, 30, 42, 82, 68, 76, 63, 48, 62, 0, 6, 52, 14, 22, 34, 80, 72, 9, 45, 68, 66, 62, 55, 67, 9, 25, 54, 46, 3, 42, 50, 23, 56, 57, 66, 43, 23, 79, 56, 61, 9, 57, 53, 23, 67, 57, 33, 33, 2, 18, 22, 54, 67, 27, 30, 0, 79, 44, 33, 49, 1, 17, 41, 69, 19, 6, 68, 64, 43, 6, 8, 51, 46, 49, 58, 11, 3, 47, 48, 51, 46, 58, 16, 26, 2, 8, 78, 18, 7, 81, 47, 45, 43, 44, 30, 18, 40, 81, 66, 72, 32, 76, 8, 79, 11, 0, 23, 51, 48, 23, 76, 24, 31, 20, 37, 55, 34, 39, 3, 60, 69, 72, 40, 11, 75, 57, 55, 73, 18, 4, 77, 49, 62, 15, 80, 52, 75, 74, 63, 61, 68, 79, 3, 0, 38, 25, 81, 21, 11, 28, 3, 30, 4, 14, 60, 32, 4, 6], [24, 12, 6, 76, 17, 54, 6, 43, 51, 7, 18, 66, 2, 24, 74, 61, 25, 81, 77, 41, 26, 79, 60, 7, 45, 27, 71, 43, 53, 62, 43, 52, 43, 5, 14, 51, 29, 52, 4, 81, 48, 32, 81, 49, 77, 29, 25, 13, 73, 53, 63, 63, 27, 4, 74, 26, 62, 16, 77, 12, 81, 50, 80, 76, 54, 76, 24, 19, 21, 41, 62, 82, 58, 59, 39, 2, 6, 2, 55, 44, 7, 21, 20, 38, 38, 44, 58, 28, 23, 58, 11, 68, 69, 78, 65, 65, 38, 81, 70, 69, 31, 6, 36, 72, 78, 77, 26, 27, 66, 14, 80, 5, 42, 6, 81, 19, 77, 61, 19, 8, 11, 27, 82, 78, 12, 4, 28, 11, 58, 58, 24], [37, 31, 60, 19, 3, 18, 44, 29, 74, 66, 78, 31, 30, 21, 21, 42, 0, 22, 4, 16, 48, 22, 5, 76, 44, 57, 71, 43, 53, 8, 44, 11, 24, 75, 30, 4, 31, 56, 34, 64, 10, 37, 41, 33, 2, 43, 23, 46, 57, 73, 32, 46, 47, 34, 23, 2, 2, 58, 16, 17, 81, 74, 27, 14, 45, 3, 16, 31, 44, 7, 79, 64, 12, 12, 31, 5, 76, 23, 79, 26, 47, 65, 22, 30, 53, 8, 20, 20, 80, 34, 19, 75, 19, 52, 54, 51, 17, 33, 67, 40, 67, 38, 50, 53, 34, 20, 55, 37, 31, 36, 70, 77, 7, 74, 48, 64, 56, 26, 48, 29, 18, 75], [46, 36, 25, 4, 56, 50, 71, 48, 42, 57, 69, 15, 33, 67, 65, 70, 69, 63, 51, 53, 10, 3, 26, 13, 17, 80, 43, 61, 12, 7, 39, 34, 38, 43, 14, 33, 48, 24, 3, 26, 29, 32, 26, 59, 41, 48, 69, 56, 48, 22, 50, 35, 11, 72, 51, 6, 62, 17, 30, 67, 8, 13, 21, 37, 17, 12, 16, 82, 56, 77, 72, 54, 54, 27, 21, 2, 6, 81, 79, 72, 24, 64, 60, 60, 64, 35, 1, 77, 23, 44, 18, 80, 25, 80, 22, 17, 11, 61, 80, 66, 71, 57, 78, 41, 69, 21, 72, 10, 26, 75, 35, 32, 13, 55, 79, 6], [37, 15, 8, 5, 39, 8, 20, 73, 58, 52, 27, 20, 56, 63, 63, 75, 35, 22, 3, 17, 71, 26, 53, 6, 44, 64, 53, 80, 50, 24, 73, 32, 63, 44, 60, 19, 45, 2, 29, 45, 53, 27, 39, 41, 30, 29, 48, 67, 26, 29, 33, 79, 38, 57, 1, 27, 59, 76, 73, 19, 76, 50, 79, 57, 30, 80, 77, 35, 13, 30, 35, 23, 61, 68, 56, 2, 6, 47, 25, 16, 6, 73, 20, 49, 57, 5, 40, 4, 52, 34, 66, 47, 19, 53, 9, 17, 58, 74, 44, 13, 70, 52, 38, 17, 30, 12, 10, 22, 31, 32, 58, 65, 57, 81, 32, 50, 3, 52, 74, 58, 4, 65, 64, 34, 18, 39, 30, 73, 32, 41, 5, 68, 4, 27, 43, 52, 75, 38, 3, 81, 24, 10, 37, 67, 19, 57, 64, 44, 17, 12, 39, 46, 76, 17, 46, 63, 23, 42, 58, 36, 13, 46, 48, 78, 7, 76, 15, 44, 16, 65, 55, 6, 17, 33, 59, 19, 80, 62, 28, 27, 79, 70, 48, 22, 28, 43, 3, 22, 4, 81, 59, 65, 78, 26, 8, 8, 15, 25, 50, 51, 7, 35, 29, 66, 40, 72, 17, 32, 56, 66, 20, 67, 80, 52, 22, 48, 30, 11, 67, 58, 6, 80, 74, 71, 9, 59, 68, 50, 47, 2, 67, 79, 10, 11], [24, 12, 6, 53, 20, 19, 54, 12, 73, 36, 15, 17, 47, 49, 37, 51, 41, 75, 77, 38, 35, 18, 62, 69, 43, 27, 14, 53, 65, 31, 76, 63, 24, 55, 50, 48, 68, 47, 60, 78, 70, 41, 53, 49, 14, 50, 57, 40, 7, 57, 63, 63, 61, 42, 73, 40, 28, 9, 42, 56, 23, 65, 57, 81, 38, 65, 50, 28, 82, 43, 7, 22, 58, 68, 53, 8, 0, 81, 5, 59, 16, 70, 31, 49, 6, 60, 15, 16, 66, 44, 67, 47, 5, 68, 9, 19, 31, 9, 13, 81, 27, 60, 63, 74, 34, 20, 74, 24, 45, 50, 7, 51, 66, 66, 3, 18, 36, 34, 40, 44, 60, 28, 77, 17, 76, 29, 82, 7, 47, 54, 45, 3, 65, 9, 0, 31, 67, 71, 3, 62, 68, 74, 40, 4, 34, 48, 26, 51, 23, 44, 4, 76, 17, 62, 15, 60, 53, 60, 65, 76, 75, 70, 55, 39, 31, 30, 48, 9, 2, 28, 3, 56, 26], [81, 78, 23, 58, 2, 50, 82, 28, 47, 25, 1, 41, 32, 63, 27, 39, 18, 24, 49, 23, 68, 68, 12, 26, 9, 26, 76, 3, 68, 8, 16, 21, 72, 44, 74, 82, 24, 40, 11, 74, 69, 43, 75, 33, 18, 23, 49, 30, 62, 62, 27, 43, 14, 57, 56, 81, 60, 50, 34, 59, 21, 50, 80, 76, 38, 73, 74, 7, 3, 43, 13, 55, 59, 46, 21, 78, 77, 34, 54, 52, 34, 33, 19, 43, 54, 73, 13, 28, 22, 20, 14, 51, 25, 62, 20, 11, 54, 26, 39, 38, 70, 20, 19, 68, 10, 46, 62, 15, 43, 67, 70, 26, 22, 19, 45, 16, 38, 57, 12, 70, 52, 4, 81, 47, 32, 14, 39, 34, 21, 5, 25, 50, 21, 41, 15, 62, 23, 64, 2, 47, 33, 27, 26, 72, 66, 68, 81, 10, 81, 73, 35, 28, 17, 78, 64, 39, 51, 60, 64, 38, 35, 39, 59, 35, 53, 2, 58, 61, 71, 5, 79, 64, 16, 69, 64, 46, 28, 39, 72, 30, 61, 23, 0, 27, 20, 12, 41, 60, 76, 32, 73, 42, 67, 19, 65, 43, 20, 4, 12, 38, 65, 82, 8, 15, 33, 45, 69, 38, 58, 33, 67, 67, 2, 13, 82, 1, 27, 14, 1, 54, 28, 75, 49, 40, 71, 37, 15, 54, 10, 71, 30, 79, 25, 35, 61, 81, 43, 38, 6, 56, 39, 46, 65, 35, 22, 32, 79, 44, 78, 72, 65, 37, 57, 68, 4, 11, 2, 62, 20, 53, 62, 30, 65, 22, 16, 1, 24, 47, 79, 62, 43, 67, 21, 70, 68, 12, 35, 1, 64, 59, 24, 7, 44, 23, 55, 15, 15, 29, 2, 53, 23, 9, 30, 81, 29, 20, 19, 82, 30, 30, 25, 75, 10, 41, 9, 31, 41, 46, 26, 17, 51, 77, 61, 62, 52, 68, 59, 25, 81, 34, 27, 59, 56, 75, 16, 58, 39, 44, 71, 26, 2, 82, 14, 67, 15, 5, 75, 64, 1, 38, 7, 42, 42, 69, 51, 53, 47, 1, 81, 81, 62, 63, 78, 78, 62, 69, 43, 77, 71, 18, 46, 67, 71, 6, 43, 78, 75, 26], [36, 31, 6, 18, 25, 64, 30, 44, 7, 30, 68, 45, 30, 51, 37, 21, 9, 4, 1, 36, 38, 78, 48, 61, 9, 7, 25, 53, 35, 0, 82, 10, 59, 61, 58, 67, 16, 2, 65, 29, 56, 39, 47, 71, 78, 54, 54, 31, 61, 68, 50, 65, 49, 75, 56, 45, 28, 78, 80, 30, 20, 79, 3, 70, 30, 0, 20, 66, 59, 31, 53, 73, 48, 39, 31, 13, 3, 8, 64, 18, 40, 65, 7, 42, 64, 9, 58, 7, 63, 58, 10, 42, 34, 1, 42, 40, 10, 74, 25, 40, 52, 1, 15, 9, 59, 62, 18, 53, 24, 63, 51, 52, 75, 10, 3, 73, 15, 3, 82, 27, 15, 61, 68, 37, 70, 28, 77, 18, 41, 55, 63, 58, 57, 43, 23, 48, 37, 38, 35, 79, 68, 12, 55, 4, 32, 17, 11, 70, 76, 55, 53, 59, 79, 72, 38, 53, 73, 52, 82, 38, 34, 26, 3, 78, 63, 16, 30, 64, 39, 73, 14, 17, 38, 68, 76, 19, 57, 24, 66, 51, 47, 51, 39, 81, 70, 56, 9, 75, 48, 72, 18, 55, 44, 46, 35, 75, 44, 0, 45, 54, 48, 49, 8, 65, 24, 26, 16, 48, 33, 18, 50, 10, 35, 46, 1, 73, 32, 2, 35, 75, 21, 80, 4, 30, 12, 31, 54, 82, 18, 48, 1, 53, 10, 35, 30, 18, 19, 53, 79, 35, 45, 13, 40, 76, 50, 36, 54, 32, 34, 79, 72, 39, 56, 62, 50, 25, 3, 67, 19, 28, 68, 38, 46, 71, 14, 65]]

nptestdata2 = [np.array(a, dtype='u1') for a in test_data_2]

#msg = nptestdata
#msg = npeyes
msg = nptestdata2

column_count = 83

def makebins(numbins=column_count):
    bins = np.zeros((numbins, 83))
    for a in msg:
        for i in range(numbins):
            bins[i] += np.bincount(a[i::numbins], minlength=83)
    return bins

# bins contains our columnwise frequency distribution.
# bins[:, y] gives the columnwise frequency for glyph y
# bins[x, :] gives the glyph frequency at column x
bins = makebins()

# glyphcounts is the number of times each glyph appears over all messages
# Summing along axis 1 would instead give the number of glyphs found in each column, which isn't very useful
glyphcounts = np.sum(bins, 0)

# The result of an indirect sort, returning the indexes into sorted(glyphcounts). The indexes just happen to be glyph numbers:
# glyphsort[0] gives the glyph number for the most common glyph, [1] is the second most common, etc
glyphsort = np.argsort(glyphcounts)[::-1]


# Chi test for correlation between distributions. Statisticians recommend against using
# this to test a distribution against itself.
def chi(dist1, dist2):
    return sum(dist1 * dist2) / ((sum(dist1) * sum(dist2)) or 1)

# Kappa test for auto-correlation. Also called Index of Coincidence.
def kappa(dist1):
    return sum(dist1 * (dist1-1)) / (sum(dist1) * sum(dist1-1))

# CHI_ENGLISH is the goal value for a distribution reflecting English text. 
# Expected for a 26-letter alphabet, and a 52-letter one with
# upper and lower case letters will be pretty close.
CHI_ENGLISH = 0.0667


class Node:
    def __init__(this, accum, glyphqueue):
        # Distribution accumulator. After finding the shift for a new row, the row is added
        # to accum and its glyph removed from glyphqueue
        this.accum = accum
        
        # List of glyphs to process in order from most to least frequent. Some glyphs may be removed early
        # due to shifts hinted by Lymm's patterns.
        this.glyphqueue = glyphqueue
        
        # List of (glyph, shift) pairs: the prospective solution, which can be transformed into a ciphertext alphabet
        this.glyphshifts = []

        
# Initialize the attack with a trunk node containing an empty accumulator and the initial glyphqueue.
# A hint is used to combine two or more rows and add them to accum for a stronger start. Remove those rows from the queue.

# During each round of the superimposition attack, find the node with the shortest glyphqueue (the top of the stack, usually).
# Find the row most likely to produce good Chi values, by popping the one with the most samples off of the glyphqueue.
# Use the Chi test to superimpose the accumulator and the row in question, once for each remaining shift amount.
#    xxx Also compute Chi using the head row and the two most recent rows? LAMAKI isn't clear on this, and both
#        LAMAKI and Friedman end the analysis after three or four rounds because their alphabets allow linguistic analysis
#        at that point. I also suspect their approach fails if the plain alphabet's distribution is flattened by homophones
#
# Add a new subnode to the current one for each shift with a chi value "close enough" (??) to the goal value.
# The node contains a copy of the accumulator after adding the shifted row, a copy of the glyphqueue after removing it, and 

trunk = Node(np.zeros((column_count,)), list(glyphsort))

# Uncomment these when no hints are apparent.
gzero = trunk.glyphqueue.pop(0)
trunk.accum += bins[:, gzero]
trunk.glyphshifts.append((gzero, 0))

# HINTS: (glyph, shift) pairs to combine during the first rounds of analysis.
# hints = [(6, 0), (33, 83-9), (41, 83-16)]  # arbitrary hints for Toboter's test ciphertexts
# hints = [(47, 0), (7, 1), (50, 2)] # hints provided by the pattern starting at position 51 of the last three eye messages

hints = []
        
nodestack = []
nodestack.append(trunk)

# ====== THE GOAL ======
chi_goal = 1

solutions = []

class AllDone(Exception): pass

def node_distrib(node):
    # return the columnwise distrib for this node after shifting each row according to its solution
    dbins = bins.copy()
    for g, s in node.glyphshifts:
        dbins[:, g] = np.roll(dbins[:, g], s)
    return dbins

def round():
    node = nodestack.pop()

    if 0 == len(node.glyphqueue) or column_count == len(node.glyphshifts):
        # xxx todo: try other branches
        node_kappa = kappa(np.sum(node_distrib(node), 1))
        
        print(f"== Solution {len(solutions)} found with kappa {node_kappa} ==")
        solutions.append(node)
        if 0 == len(nodestack):
            raise AllDone("All done") 
        return
        
    if(len(hints)):
        glyph, s = hints.pop(0)
        node.glyphqueue.remove(glyph)
        shifts = [s]
        print(f"HINT: {glyph:3}, (no chi), {len(node.accum.nonzero()[0]):2}, {shifts}")
    else:
        glyph = node.glyphqueue.pop(0)

        # Get all of the shifts that haven't been used yet
        def getshifts():
            shifts = set(range(1, column_count))
            for g, s in node.glyphshifts:
                shifts.discard(s)
            return np.array(sorted(shifts))

        shifts = getshifts()

        # Test the row in question against accum using all available shifts
        chis = np.array([chi(node.accum, np.roll(bins[:, glyph], shift)) for shift in shifts])
        
        ptlens = [(len((node.accum + np.roll(bins[:, glyph], shift)).nonzero()[0]), shift) for shift in shifts]

        # Find all unique chi values. chis_u[chis_inverse] reconstructs chis
        chis_u, chis_inverse = np.unique(chis, return_inverse=True)
        
        # Find the chi closest to the goal. 
        chis_u2 = abs(chis_u - chi_goal)
        # Instead of finding the absolute closest chi, instead find the chis that are within epsilon of the goal?
        #CHI_EPSILON = 0.001
        #goal_idxs = (chis_u2 < CHI_EPSILON).nonzero()[0]
        #if 0 == len(goal_idxs):
            #print("No chi closer than epsilon.")
        goal_idxs = np.argmin(chis_u2)
        shift_idxs = np.isin(chis_inverse, goal_idxs).nonzero()[0]
        if 0 == len(shift_idxs):
            print(goal_idxs)
            raise RuntimeError
        shifts = shifts[shift_idxs]
        
        minlen, minshift = min(ptlens)
        foundminlen = min(len((node.accum + np.roll(bins[:, glyph], shift)).nonzero()[0]) for shift in shifts)
        
        if foundminlen > minlen:
            minlenchi = chi(node.accum, np.roll(bins[:, glyph], minshift))
            print(f"!! Shifts {shifts} increased PT length to {foundminlen} when shift {minshift} was an option with minlen {minlen} and chi {minlenchi} !!")
    
        #print(f"CHIS: {chis_u}, picked {chis_u[shift_idxs]}")
        
        # Get the shifts corresponding to this chi. The indexes where chis_inverse==goal_idx are the same as the indexes of the shifts that produced those chis.
        #goal_idx = np.argmin(chis_u2)
        #shifts = shifts[(chis_inverse == goal_idx).nonzero()]

        #print(f"{glyph:3}, {chis[shift_idxs]}, {len(node.accum.nonzero()[0]):2}", shifts)
    for shift in shifts:
        leaf = Node(node.accum + np.roll(bins[:, glyph], shift), list(node.glyphqueue))
        leaf.glyphshifts = list(node.glyphshifts)
        leaf.glyphshifts.append((glyph, shift))
        nodestack.append(leaf)

print("== Glyph, Chi, len(Pa), [shift, ...] ==")
rounds = 10000
try:
    for i in range(rounds): 
        round()
    
except AllDone:
    pass
else:
    print(f"== Exceeded {rounds} rounds ==")
finally:
    for node in solutions:
        node.ptcount = node.accum.nonzero()[0].shape[0]
    
    solutions_sorted = sorted(solutions, key=lambda a:a.ptcount)
    node = solutions_sorted[0]
    solnum = solutions.index(node)
    print(f"== Solution {solnum} had the fewest Pt letters with {node.ptcount} ==")
    
    cipher = np.zeros((83,), 'u1')
    inv_cipher = np.zeros((83,), 'u1')
    for g, s in node.glyphshifts:
        cipher[s] = g
        inv_cipher[g] = s
    print("== Cipher alphabet ==")
    print(cipher)
    print("== Unique plaintexts:", node.accum.nonzero()[0].shape[0], "==")
    
    print("== Inverse cipher alphabet ==")
    print(inv_cipher)
    alldecrs = [(len(set(a)), a, key) for a, key in [((inv_cipher[msg[0]] - key + np.arange(len(msg[0])))%83, key) for key in range(83)]]
    alldecrs.sort(key=lambda a:a[0])
    decrlen, decr, key = alldecrs[0]
        
    print(f"== Decrypted first message; key: {key} uniques: {decrlen} ==")
    print(decr)
    #plt.plot(np.arange(83), nodestack[-1].accum, 'o')

    plt.figure(0, (8, 12))
    plt.subplot(211)
    plt.scatter(*bins.nonzero(), c=bins[bins.nonzero()])
    plt.colorbar() 
    
    dbins = node_distrib(node)
    
    plt.subplot(212)
    plt.scatter(*dbins.nonzero(), c=dbins[dbins.nonzero()])
    plt.colorbar()

    plt.show()

